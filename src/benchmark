#!/bin/bash
# set -x

RUNDIR="$1"
RPS="$2"

LOGFILE="$RUNDIR/loader"
ERIS_LOG="$RUNDIR/eris.log"
ERIS_QUOTA="$RUNDIR/quota.csv"
ERIS_CACHE="$RUNDIR/cache.csv"
# STRESS_LOG="$RUNDIR/stress.log"
INST_RETIRED="$RUNDIR/inst.log"

mkdir -p "$RUNDIR"
cp "$CONFIG" "$RUNDIR/conf.env"

_cleanup() {
    # set -x

    # Immediately stop executing BE (inst. retired)
    docker kill stress spec2017 2> /dev/null

    [[ -n $STATS_ID ]] && kill $STATS_ID
    [[ -n $ERIS_ID ]] && kill $ERIS_ID

    process_client_logs
    docker rm -f dc-client

    wait $STATS_ID
    docker rm -f dc-server stress spec2017 2> /dev/null

    # POSTPROCESSING
    if ((USE_ERIS || USE_ERIS_LAT)); then
        grep "set container stress cpu quota" "$ERIS_LOG" | sed 's/ERROR.*//' | awk '$2 = $2","' | awk '{print $1,$2,$9}' > "$ERIS_QUOTA"
        grep "set container stress llc occupancy" "$ERIS_LOG" | sed 's/ERROR.*//' | awk '$2 = $2","' | awk '{print $1,$2,$11}' > "$ERIS_CACHE"
    fi

    if ((USE_STRESS || USE_SPEC)); then
        # docker wait spec2017
        [[ -n $PERF_ID ]] && kill $PERF_ID
        grep instructions $INST_RETIRED | awk '{print $1}' | sed 's/,//g' | sponge $INST_RETIRED
    fi

    [[ ! -z $(jobs -p) ]] && echo DANGLING BACKGROUND JOBS: $(jobs -p) >&2

    echo CLEANUP DONE
}
trap _cleanup EXIT

run_stats() {
    if ((USE_STRESS)); then
        src/stats $RUNDIR "dc-server $SERVER_ID" "stress $BE_ID" & STATS_ID=$!
    elif ((USE_SPEC)); then
        src/stats $RUNDIR "dc-server $SERVER_ID" "spec2017 $BE_ID" & STATS_ID=$!
    else
        src/stats $RUNDIR "dc-server $SERVER_ID" & STATS_ID=$!
    fi
    echo Stats collection started at $(date +%T): $STATS_ID
}

run_dynamic() {
    echo -n "Benchmarking, started at $(date +%T), dc-client: "
    docker run -d \
        --net dc \
        --name dc-client \
        --cpuset-cpus=1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35 \
        --cpuset-mems=1 \
        -v $BASEDIR/dc-client/entrypoints:/usr/local/bin \
        -v $BASEDIR/loads/$LOAD.cfg:/load.cfg \
        -v $BASEDIR/lat_log:/usr/src/memcached/memcached_client/logs \
        --env-file $CONFIG \
        jonassa/benchmarks:dc-client dynamic.sh
    echo Benchmarking the server ...
}

run_static() {
    echo -n "Benchmarking, started at $(date +%T), dc-client: "
    docker run -d \
        --net dc \
        --name dc-client \
        --cpuset-cpus=1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35 \
        --cpuset-mems=1 \
        -v $BASEDIR/dc-client/entrypoints:/usr/local/bin \
        -v $BASEDIR/lat_log:/usr/src/memcached/memcached_client/logs \
        --env-file $CONFIG \
        jonassa/benchmarks:dc-client static.sh $RPS
    echo Benchmarking the server ...
}

init_logs() {
    echo timestamp, timeDiff, rps, requests, gets, sets, hits, misses, avg_lat, 90th, 95th, 99th, std, min, max, avgGetSize > "$LOGFILE.lat"
    echo outstanding > "$LOGFILE.osr"
    echo rps > "$LOGFILE.rps"
}

process_client_logs() {
    docker logs dc-client > "$LOGFILE.log" 2> /dev/null

    sed -n '/timeDiff/{n;p}' "$LOGFILE.log" | sed 1d >> "$LOGFILE.lat"
    grep -P '\d, \d+: ' "$LOGFILE.log" | sed 1d | awk '{print $4}' >> "$LOGFILE.rps"
    sed -n '/Outstanding/{n;p}' "$LOGFILE.log" | sed 1d | awk '{for(i=1; i<=NF; i++) t+=$i; print t; t=0}' >> "$LOGFILE.osr"

    paste -d, $LOGFILE.rps $LOGFILE.lat $LOGFILE.osr > $LOGFILE.csv && \
        rm $LOGFILE.rps $LOGFILE.lat $LOGFILE.osr

    # if ((USE_STRESS)); then
    #     # No output here for now
    #     # docker logs stress > "$STRESS_LOG"
    # elif ((USE_SPEC)); then
    #     docker kill spec2017
    # fi
}

# TODO: use functions
# run_server() {
#     docker run \
#         --cpuset-cpus=0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34 \
#         --cpuset-mems=0 $@
# }
# run_client() {
#     docker run \
#         --cpuset-cpus=1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35 \
#         --cpuset-mems=1 $@
# }

docker rm -f dc-server dc-client dc-warmup stress spec2017 2> /dev/null

# SERVER
export SERVER_ID=$(docker run -d \
    --net dc \
    --name dc-server \
    --cpuset-cpus=0,2,4,6,8,10,12,14,16 \
    --cpuset-mems=0 \
    cloudsuite/data-caching:server \
        -t $SERVER_WORKERS -m $SERVER_MEMORY -n $SERVER_MIN)
echo Running dc-server: $SERVER_ID

# WARMUP
if  [[ -z $NO_WARMUP ]]; then
    echo -n "Running dc-warmup: "
    docker run -d --rm \
        --net dc \
        --name dc-warmup \
        --cpuset-cpus=1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35 \
        --cpuset-mems=1 \
        -v $BASEDIR/dc-client/entrypoints/:/usr/local/bin \
        --env-file "$CONFIG" \
        jonassa/benchmarks:dc-client warmup.sh

    echo Warming up the server ...
    docker container wait dc-warmup
fi

# ERIS
if [[ -n $ERIS_MODEL ]]; then
    eris_model="models/$ERIS_MODEL.json"
else
    eris_model='threshold.json'
fi

if ((!USE_CAT)); then
    eris_args='--disable-cat'
fi

if [[ -n $ERIS_CONTROLLER ]]; then
    controller="--controller $ERIS_CONTROLLER"
fi

if ((USE_ERIS)); then

    source /workspace/prm-stock/.direnv/python-3.6.8/bin/activate
    cd /workspace/prm-stock/eris

    export TZ='UTC'

    unbuffer numactl --cpunodebind=0 --membind=0 \
        python eris.py -v --collect-metrics --record --detect --control --enable-hold -t "$eris_model" $eris_args memcached.json &> "$ERIS_LOG" &
        ERIS_ID=$!
    echo Running eris: $ERIS_ID
    unset TZ
    cd - &> /dev/null

elif ((USE_ERIS_LAT)); then

    source /workspace/prm-lat/.direnv/python-3.6.8/bin/activate
    cd /workspace/prm-lat/eris

    export TZ='UTC'

    unbuffer numactl --cpunodebind=0 --membind=0 \
        python eris.py -v --collect-metrics --record --detect --control --enable-hold -t "$eris_model" $eris_args $controller --latency-threshold ${LATENCY_THRESHOLD:-4.76} memcached.json &> "$ERIS_LOG" &
        ERIS_ID=$!
    echo Running eris: $ERIS_ID
    unset TZ
    cd - &> /dev/null

fi

# STRESS-NG
if ((USE_STRESS)); then
    export BE_ID=$(docker run -d \
        --name stress \
        --cpuset-cpus=0,2,4,6,8,10,12,14,16 \
        --cpuset-mems=0 \
        --security-opt seccomp=/root/perf.json \
        jonassa/benchmarks:stress-ng \
            --metrics-brief --timeout 0 \
            $STRESS_PARAMS)
    echo Running stress-ng: $BE_ID
    sleep 1
    # perf should exit when pids stop, when stress-ng container is killed
    perf stat -e instructions -p $(pgrep stress-ng | tr '\n' ',') 2> $INST_RETIRED &
fi

# SPEC2017
if ((USE_SPEC)); then
    BE_ID=$(docker run -d \
        --name spec2017 \
        --cpuset-cpus=0,2,4,6,8,10,12,14,16 \
        --cpuset-mems=0 \
        -v /var/tmp/monitor:/monitor \
        jonassa/benchmarks:spec2017 \
            -- 500.perlbench_r \
        )

    echo Running spec2017: $BE_ID
    /workspace/spec/perf_monitor perlbench $INST_RETIRED & PERF_ID=$!
    # /workspace/spec/perf_monitor perlbench $INST_RETIRED &>> $INST_RETIRED & PERF_ID=$!
fi

# BENCHMARK
init_logs
run_stats

if ((DYNAMIC_LOAD)); then
    run_dynamic
else
    run_static
fi

docker container wait dc-client

