#!/bin/bash

if [[ $# = 2 ]]; then
    TAG=${1}
    RPS=${2}
    if [[ -z $CONFIG ]]; then
        echo "Benchmark must be run from batch_run as of now, depends on \$CONFIG" >&2
        exit
    fi
else
    echo "Run tag and RPS are required arguments" >&2
    exit
fi

LOGDIR="$OUTDIR/logs"
STATSDIR="$OUTDIR/stats"
ERIS_DIR="$BASEDIR/$OUTDIR/eris"

LOGFILE="$LOGDIR/$RPS"
STATSFILE="$STATSDIR/$RPS"
ERIS_LOG="$ERIS_DIR/$RPS"

mkdir -p $LOGDIR $STATSDIR $ERIS_DIR
cp "$CONFIG" "$OUTDIR/conf.env"

_cleanup() {
    [[ -n $STATS_ID ]] && kill -0 "$STATS_ID" && kill "$STATS_ID" &> /dev/null
    [[ -n $ERIS_ID ]]  && kill -0 "$ERIS_ID"  && kill "$ERIS_ID" &> /dev/null

    wait $STATS_ID &> /dev/null
    docker rm -f dc-server dc-client stress 2> /dev/null

    if (($USE_ERIS)); then
        grep "set container stress cpu quota" "$ERIS_LOG.log" | sed 's/ERROR.*//' | awk '$2 = $2","' | awk '{print $1,$2,$9}' > "$ERIS_LOG.quota"
    fi

    [ ! -z $(jobs -p) ] && ( echo "There are dangling jobs"; kill -9 "$(jobs -p)" )

    echo
    wc -l ${LOGFILE}.csv
    echo "Collected $(jq length $STATSFILE.json) stats API responses" 
    wc -l $STATSFILE.rapl
}
trap _cleanup EXIT

run_dynamic_step() {
    echo -n "Benchmarking, started at $(date +%T), dc-client: "
    docker run -d \
        --net dc \
        --name dc-client \
        --cpuset-cpus=1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35 \
        --cpuset-mems=1 \
        -v $BASEDIR/dc-client/entrypoints:/usr/local/bin \
        -v $BASEDIR/load/$LOAD.cfg:/load.cfg \
        --env-file $CONFIG \
        jonassa/benchmarks:dc-client dynamic.sh
}

init_logs() {
    echo "timestamp, timeDiff, rps, requests, gets, sets, hits, misses, avg_lat, 90th, 95th, 99th, std, min, max, avgGetSize" > "$LOGFILE.lat"
    echo "outstanding" > "$LOGFILE.osr"
    echo "rps" > "$LOGFILE.rps"
}

process_client_logs() {
    docker logs dc-client > "${LOGFILE}.txt" 2> /dev/null

    sed -n '/timeDiff/{n;p}' "$LOGFILE.txt" | sed 1d >> "$LOGFILE.lat"
    grep -P '\d, \d+: ' "$LOGFILE.txt" | sed 1d | awk '{print $4}' >> "$LOGFILE.rps"
    sed -n '/Outstanding/{n;p}' "$LOGFILE.txt" | sed 1d | awk '{for(i=1; i<=NF; i++) t+=$i; print t; t=0}' >> "$LOGFILE.osr"
    paste -d, $LOGFILE.rps $LOGFILE.lat $LOGFILE.osr > $LOGFILE.csv && rm $LOGFILE.rps $LOGFILE.lat $LOGFILE.osr

    if (($USE_STRESS)); then
        docker logs stress > "${LOGFILE}.stress"
    fi

    docker rm -f dc-client stress 2> /dev/null
}

printf "\n============================================================================================\n"
printf "Benchmarking memcached with $RPS attempted RPS, for $(expr $RUNTIME / 60) minutes, reporting every $STATS_INTERVAL seconds"
printf "\n============================================================================================\n\n"

# TODO: use functions
# run_server() {
#     docker run \
#         --cpuset-cpus=0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34 \
#         --cpuset-mems=0 $@
# }
# run_client() {
#     docker run \
#         --cpuset-cpus=1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35 \
#         --cpuset-mems=1 \
#        $@ \
# }

docker rm -f dc-server dc-client dc-warmup stress 2> /dev/null

# SERVER
export SERVER_ID=$(docker run -d \
    --net dc \
    --name dc-server \
    --cpuset-cpus=0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34 \
    --cpuset-mems=0 \
    cloudsuite/data-caching:server \
        -t $SERVER_WORKERS -m $SERVER_MEMORY -n $SERVER_MIN)
echo "Running dc-server: $SERVER_ID"

# WARMUP
if [[ ! $NO_WARMUP == '1' ]]; then
    echo -n "Running dc-warmup: "
    docker run -d --rm \
        --net dc \
        --name dc-warmup \
        --cpuset-cpus=1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35 \
        --cpuset-mems=1 \
        -v $BASEDIR/dc-client/entrypoints/:/usr/local/bin \
        --env-file "$CONFIG" \
        jonassa/benchmarks:dc-client warmup.sh

    echo "Warming up the server ..."
    docker container wait dc-warmup
fi

# ERIS
if (($USE_ERIS)); then
    source /opt/platform-resource-manager/.direnv/python-3.6.8/bin/activate
    cd /opt/platform-resource-manager/eris

    export TZ='UTC'
    numactl --cpunodebind=0 --membind=0 \
        python3 eris.py -v --collect-metrics --record --detect --control -t "models/${ERIS_MODEL}.json" workload.json &> "$ERIS_LOG.log" &
        ERIS_ID=$!
    echo "Running eris: $ERIS_ID"
    cd -
fi

# STRESS-NG
if (($USE_STRESS)); then
    export STRESS_ID=$(docker run -d \
        --name stress \
        --cpuset-cpus=0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34 \
        --cpuset-mems=0 \
        polinux/stress-ng \
            --metrics-brief --timeout 0 \
            $STRESS_PARAMS)
    echo -n "Running stress-ng: $STRESS_ID"
fi

# Run benchmark
if (($DYNAMIC_LOAD)); then
    init_logs

    src/stats $STATSFILE & STATS_ID=$!
    echo "Stats collection started at $(date +%T): $STATS_ID"

    run_dynamic_step
    echo "Benchmarking the server ..."
    docker container wait dc-client
    process_client_logs

else
    echo "Only dynamic loads are supported atm"
    exit
    # docker run -d \
    #     --net dc \
    #     --name dc-client \
    #     --cpuset-cpus=1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35 \
    #     --cpuset-mems=1 \
    #     -v dc-client/entrypoints:/usr/local/bin \
    #     --env-file "$CONFIG" \
    #     jonassa/benchmarks:dc-client entrypoint.sh $RPS
fi

# echo "Benchmarking the server ..."
# docker container wait dc-client

echo "--------------------------------"
echo "Benchmark at $RPS rps complete"
echo "--------------------------------"

