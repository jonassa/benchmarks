#!/bin/bash

if [ $# = 2 ]; then
    TAG=${1}
    RPS=${2}
    if [[ -z $CONFIG ]]; then
        echo "Benchmark must be run from batch_run as of now, depends on \$CONFIG" >&2
        exit
    fi
else
    echo "Run tag and RPS are required arguments" >&2
    exit
fi

LOGDIR="$OUTDIR/logs"
STATSDIR="$OUTDIR/stats"
LOGFILE="$LOGDIR/$RPS"
STATSFILE="$STATSDIR/$RPS"

mkdir -p $OUTDIR $LOGDIR $STATSDIR
cp "$CONFIG" "$OUTDIR/conf.env"

export CONNECTIONS=$(($CPW * $CLIENT_WORKERS))
export N_ROWS=$(($RUNTIME / $STATS_INTERVAL))

if [[ -f "$OUTDIR/params.txt" ]]; then
    echo "$RPS" >> $OUTDIR/params.txt
else
    printf "$(date)\nTag: $TAG\n" > "$OUTDIR/params.txt"
    printf "RPS:\n$RPS\n" >> "$OUTDIR/params.txt"
fi

_cleanup() {
    docker rm -f stress dc-warmup &> /dev/null

    kill $STATS_ID &> /dev/null

    # TODO: 2> /dev/null
    docker logs -t dc-client | grep -v -e "starting receive" -e "Creating worker" -e "num_worker" > "$LOGFILE.txt"

    # Headers
    echo "timestamp, timeDiff, rps, requests, gets, sets, hits, misses, avg_lat, 90th, 95th, 99th, std, min, max, avgGetSize" > "${LOGFILE}_lat.csv" 
    echo "rps" > "$LOGFILE.rps"

    if [ "$DYNAMIC_LOAD" = 1 ]; then
        grep -oP 'DYNAMIC RPS: \K\w+' "$LOGFILE.txt" >> "$LOGFILE.rps"
        # sed -n '/timeDiff/{n;p}' "$LOGFILE.txt" | awk '$1 = $1","' | sed "1~$(($N_ROWS + 1))d" >> "${LOGFILE}_lat.csv"
        # TODO: This is very hacky and likely to break. Consider using a new container for each dynamic rps instead.
        sed -n '/timeDiff/{n;p}' "$LOGFILE.txt" | awk '$1 = $1","' | grep -v 161420 >> "${LOGFILE}_lat.csv"
    else
        for i in $(seq $N_ROWS); do
            echo $RPS >> "$LOGFILE.rps"
        done
        sed -n '/timeDiff/{n;p}' "$LOGFILE.txt" | awk '$1 = $1","' | sed 1d >> "${LOGFILE}_lat.csv"
    fi

    echo -n "timestamp " > "${LOGFILE}_osr.csv"
    for i in $(seq $CLIENT_WORKERS); do
        if [[ $i = $CLIENT_WORKERS ]]; then
            echo "osr$i" >> "${LOGFILE}_osr.csv"
        else
            echo -n "osr$i " >> "${LOGFILE}_osr.csv"
        fi
    done
    sed -n '/Outstanding/{n;p}' "$LOGFILE.txt" | sed 1d >> "${LOGFILE}_osr.csv"
    tr ' ' ',' < "${LOGFILE}_osr.csv" | sed 's/,$//' | sponge "${LOGFILE}_osr.csv"

    docker rm -f dc-client &> /dev/null

    echo "Waiting for stats cleanup ..."
    wait $STATS_ID
    docker rm -f dc-server &> /dev/null

    echo "Cleanup performed"
    #[[ -n $(jobs -p) ]] && kill -9 $(jobs -p)

    # echo "Verifying output integrity"
    # $BASEDIR/src/test_benchmark
}
trap _cleanup EXIT

printf "\n============================================================================================\n"
printf "Benchmarking memcached with $RPS attempted RPS, for $(expr $RUNTIME / 60) minutes, reporting every $STATS_INTERVAL seconds"
printf "\n============================================================================================\n\n"

# alias run_server='docker run --cpuset-cpus=0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34 --cpuset-mems=0'
# alias run_client='docker run --cpuset-cpus=1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35 --cpuset-mems=1'

docker rm -f dc-server dc-client dc-warmup stress &> /dev/null

# Start server
#--cgroup-parent /docker/server/ \
export SERVER_ID=$(docker run -d \
    --net dc \
    --name dc-server \
    --cpuset-cpus=0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34 \
    --cpuset-mems=0 \
    cloudsuite/data-caching:server \
        -t $SERVER_WORKERS -m $SERVER_MEMORY -n $SERVER_MIN)
echo "Running dc-server: $SERVER_ID"

# Warm up server
echo -n "Running dc-warmup: "
# --cgroup-parent /docker/client/ \
docker run -d --rm \
    --net dc \
    --name dc-warmup \
    --cpuset-cpus=1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35 \
    --cpuset-mems=1 \
    -v $BASEDIR/src/warmup.sh:/entrypoint.sh \
    --env-file "$CONFIG" -e CONNECTIONS \
    jonassa/data-caching:client-ts

echo "Warming up the server ..."
docker container wait dc-warmup

# Run benchmark
if [ "$DYNAMIC_LOAD" = 1 ]; then

    N_STEPS=5
    export STEP_TIME=$(($RUNTIME / $N_STEPS))
    export STEP_INTERVAL=$(($STATS_INTERVAL / $N_STEPS))

    #--cgroup-parent /docker/client/ \
    docker run -d \
        --net dc \
        --name dc-client \
        --cpuset-cpus=1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35 \
        --cpuset-mems=1 \
        -v $BASEDIR/src/dynamic.sh:/entrypoint.sh \
        --env-file "$CONFIG" -e CONNECTIONS \
        -e STEP_TIME -e STEP_INTERVAL -e N_ROWS \
        jonassa/data-caching:client-ts $RPS &> /dev/null

else

    #--cgroup-parent /docker/client/ \
    docker run -d \
        --net dc \
        --name dc-client \
        --cpuset-cpus=1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35 \
        --cpuset-mems=1 \
        -v $BASEDIR/src/entrypoint.sh:/entrypoint.sh \
        --env-file "$CONFIG" -e CONNECTIONS \
        jonassa/data-caching:client-ts $RPS &> /dev/null

fi
echo "Running dc-client: at $(date +%T)"

$BASEDIR/src/stats "$STATSFILE" &
STATS_ID=$!
echo "Collecting stats ($STATS_ID) at $(date +%T)"

# Run stress-ng
if [ "$USE_STRESS" = 1 ]; then
    echo -n "Running stress-ng: "
    #--cgroup-parent /docker/server/ \
    docker run -d --rm \
        --name stress \
        --cpuset-cpus=0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34 \
        --cpuset-mems=0 \
        polinux/stress-ng \
            --vm 9 \
            --vm-bytes 4g \
            --metrics-brief \
            --timeout 0
# --cpu 18 \
# --cpu-load 50 \
fi

echo "Benchmarking the server ..."
docker container wait dc-client

echo "--------------------------------"
echo "Benchmark at $RPS rps complete"
echo "--------------------------------"

