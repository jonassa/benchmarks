#!/bin/bash

RUNDIR="$1"
RPS="$2"

LOGFILE="$RUNDIR/loader"
ERIS_LOG="$RUNDIR/eris.log"
ERIS_QUOTA="$RUNDIR/quota.csv"
STRESS_LOG="$RUNDIR/stress.log"
STRESS_INST="$RUNDIR/inst.log"

mkdir -p "$RUNDIR"
cp "$CONFIG" "$RUNDIR/conf.env"

_cleanup() {
    echo STARTING CLEANUP at $(date +%T)
    process_client_logs

    # [[ -n $STATS_ID ]] && kill -0 "$STATS_ID" && kill "$STATS_ID" &> /dev/null
    [[ -n $STATS_ID ]] && kill "$STATS_ID" &> /dev/null
    # [[ -n $ERIS_ID ]]  && kill -0 "$ERIS_ID"  && kill "$ERIS_ID" &> /dev/null
    [[ -n $ERIS_ID ]] && kill "$ERIS_ID" &> /dev/null && echo KILLED ERIS at $(date +%T)

    wait $STATS_ID &> /dev/null
    docker rm -f dc-server dc-client stress 2> /dev/null

    if ((USE_ERIS)); then
        grep "set container stress cpu quota" "$ERIS_LOG" | sed 's/ERROR.*//' | awk '$2 = $2","' | awk '{print $1,$2,$9}' > "$ERIS_QUOTA"
    fi

    # [ ! -z $(jobs -p) ] && ( echo "There are dangling jobs"; kill -9 "$(jobs -p)" )

    # wc -l $LOGFILE.csv
    # echo "Collected $(jq length $STATS_FILE) stats API responses" 
    # wc -l $RAPL_FILE
}
trap _cleanup EXIT

run_stats() {
    if ((USE_STRESS)); then
        src/stats $RUNDIR "dc-server $SERVER_ID" "stress $STRESS_ID" & STATS_ID=$!
    else
        src/stats $RUNDIR "dc-server $SERVER_ID" & STATS_ID=$!
    fi
    echo Stats collection started at $(date +%T): $STATS_ID
}

run_dynamic() {
    echo -n "Benchmarking, started at $(date +%T), dc-client: "
    docker run -d \
        --net dc \
        --name dc-client \
        --cpuset-cpus=1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35 \
        --cpuset-mems=1 \
        -v $BASEDIR/dc-client/entrypoints:/usr/local/bin \
        -v $BASEDIR/loads/$LOAD.cfg:/load.cfg \
        -v $BASEDIR/lat_log:/usr/src/memcached/memcached_client/logs \
        --env-file $CONFIG \
        jonassa/benchmarks:dc-client dynamic.sh
    echo Benchmarking the server ...
}

run_static() {
    echo -n "Benchmarking, started at $(date +%T), dc-client: "
    docker run -d \
        --net dc \
        --name dc-client \
        --cpuset-cpus=1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35 \
        --cpuset-mems=1 \
        -v $BASEDIR/dc-client/entrypoints:/usr/local/bin \
        -v $BASEDIR/lat_log:/usr/src/memcached/memcached_client/logs \
        --env-file $CONFIG \
        jonassa/benchmarks:dc-client static.sh $RPS
    echo Benchmarking the server ...
}

init_logs() {
    echo timestamp, timeDiff, rps, requests, gets, sets, hits, misses, avg_lat, 90th, 95th, 99th, std, min, max, avgGetSize > "$LOGFILE.lat"
    echo outstanding > "$LOGFILE.osr"
    echo rps > "$LOGFILE.rps"
}

process_client_logs() {
    docker logs dc-client > "$LOGFILE.log" 2> /dev/null

    sed -n '/timeDiff/{n;p}' "$LOGFILE.log" | sed 1d >> "$LOGFILE.lat"
    grep -P '\d, \d+: ' "$LOGFILE.log" | sed 1d | awk '{print $4}' >> "$LOGFILE.rps"
    sed -n '/Outstanding/{n;p}' "$LOGFILE.log" | sed 1d | awk '{for(i=1; i<=NF; i++) t+=$i; print t; t=0}' >> "$LOGFILE.osr"

    paste -d, $LOGFILE.rps $LOGFILE.lat $LOGFILE.osr > $LOGFILE.csv && \
        rm $LOGFILE.rps $LOGFILE.lat $LOGFILE.osr

    if ((USE_STRESS)); then
        # No output here for now
        # docker logs stress > "$STRESS_LOG"

        # Use kill if it does not interfere with perf
        docker kill stress
    fi

    docker rm -f dc-client stress 2> /dev/null
}

# TODO: use functions
# run_server() {
#     docker run \
#         --cpuset-cpus=0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34 \
#         --cpuset-mems=0 $@
# }
# run_client() {
#     docker run \
#         --cpuset-cpus=1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35 \
#         --cpuset-mems=1 $@
# }

docker rm -f dc-server dc-client dc-warmup stress 2> /dev/null

# SERVER
export SERVER_ID=$(docker run -d \
    --net dc \
    --name dc-server \
    --cpuset-cpus=0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34 \
    --cpuset-mems=0 \
    cloudsuite/data-caching:server \
        -t $SERVER_WORKERS -m $SERVER_MEMORY -n $SERVER_MIN)
echo Running dc-server: $SERVER_ID

# WARMUP
if  [[ -z $NO_WARMUP ]]; then
    echo -n "Running dc-warmup: "
    docker run -d --rm \
        --net dc \
        --name dc-warmup \
        --cpuset-cpus=1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35 \
        --cpuset-mems=1 \
        -v $BASEDIR/dc-client/entrypoints/:/usr/local/bin \
        --env-file "$CONFIG" \
        jonassa/benchmarks:dc-client warmup.sh

    echo Warming up the server ...
    docker container wait dc-warmup
fi

# ERIS
if ((USE_ERIS)); then

    cd /workspace/prm/eris
    source /root/anaconda3/etc/profile.d/conda.sh
    conda activate prm

    export TZ='UTC'

    if [[ -n $ERIS_MODEL ]]; then
        eris_model="models/$ERIS_MODEL.json"
    else
        eris_model='threshold.json'
    fi

    unbuffer numactl --cpunodebind=0 --membind=0 \
        python eris.py -v --collect-metrics --record --detect --control -t "$eris_model" workload.json &> "$ERIS_LOG" &
        ERIS_ID=$!
    echo Running eris: $ERIS_ID
    #unset TZ
    cd - &> /dev/null

elif ((USE_ERIS_LAT)); then

    source /opt/platform-resource-manager/.direnv/python-3.6.8/bin/activate
    cd /opt/platform-resource-manager/eris

    export TZ='UTC'

    if [[ -n $ERIS_MODEL ]]; then
        eris_model="models/$ERIS_MODEL.json"
    else
        eris_model='threshold.json'
    fi

    # numactl --cpunodebind=0 --membind=0 python3 eris.py -v --collect-metrics --record --detect --control -t "models/$ERIS_MODEL.json" workload.json 2>&1 | tee -a "$ERIS_LOG" &
    # numactl --cpunodebind=0 --membind=0 python3 eris.py -v --collect-metrics --record --detect --control -t "models/$ERIS_MODEL.json" workload.json &   
    unbuffer numactl --cpunodebind=0 --membind=0 \
        python eris.py -v --collect-metrics --record --detect --control -t "$eris_model" workload.json &> "$ERIS_LOG" &
        ERIS_ID=$!
    echo Running eris: $ERIS_ID
    #unset TZ
    cd - &> /dev/null

fi

# STRESS-NG
if ((USE_STRESS)); then
    export STRESS_ID=$(docker run -d \
        --name stress \
        --cpuset-cpus=0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34 \
        --cpuset-mems=0 \
        --security-opt seccomp=/root/perf.json \
        jonassa/benchmarks:stress-ng \
            --metrics-brief --timeout 0 \
            $STRESS_PARAMS)
    echo Running stress-ng: $STRESS_ID
    sleep 1
    perf stat -e instructions -p $(pgrep stress-ng | tr '\n' ',') 2> $STRESS_INST &
fi

# BENCHMARK
init_logs
run_stats

if ((DYNAMIC_LOAD)); then
    run_dynamic
else
    run_static
fi

docker container wait dc-client

